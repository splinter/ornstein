var notify = require('notify');
var dhcLib = require('dhc-lib');
var http = require('http');
exports.run = function(opts) {
    var projectName = opts.projectDir;
    var requestList = [];
    //Get the request list in the DHC project
    requestList = dhcLib.getRequests(projectName);
    notify.info('Invoking requests defined in the project: ' + projectName);
    //Invoke each request and run the associated tests
    requestList.forEach(function(definition, index) {
        //Normalize the request definition
        //definition = dhcLib.createRequest(definition);
        //console.log(definition);
        console.log(definition);
        definition = dhcLib.normalize(definition);
        perform(definition, projectName);
    });
};
var perform = function(definition, projectName) {
    invokeDHCRequest(definition, projectName);
    //invokeDHCTests(definition.name,projectName,definition);
};
var decomposeURI = function(uri){
	var opts ={};
	var comps = uri.split('/');
	var base = comps[0];
	var path = comps.slice(1).join('/');
	var host = base.split(':');
	opts.host = host[0] || 'localhost';
	opts.port = host[1] || '80';
	opts.path = path;
	return opts;
};
var buildRequestOptions = function(definition) {
    var headerDirectives = definition.headers;
    var headers = {};
    var header;
    var opts = decomposeURI(definition.url);
    headerDirectives.forEach(function(headerInfo) {
        if (headerInfo.enabled) {
        	headers[headerInfo.name]=headerInfo.value;
        }
    });
    return {
        method: definition.method,
        path:opts.path,
        host:opts.host,
        port:opts.port,
        headers: headers
    };
};
var printRequestDetails = function(options, definition) {
    notify.info(options.method.toUpperCase() + ' ' + options.uri);
    notify.info('request options: '+JSON.stringify(options));
    notify.info(JSON.stringify(definition));
    notify.info('*****');
};
var invokeDHCRequest = function(definition, projectName) {
    var opts = buildRequestOptions(definition);
    printRequestDetails(opts, definition);
    // var req = http.request(opts,function(response){
    // 	var str = '';
    // 	response.on('data',function(data){
    // 		str+=data;
    // 	});
    // 	response.on('end',function(){
    // 		var input = {};
    // 		input.headers = response.headers;
    // 		input.content = str;
    // 		invokeDHCTests(definition.name,projectName,definition,input);
    // 	});
    // 	response.on('error',function(){
    // 		notify.error('test: '+definition.name+' failed.');
    // 	});
    // });
    // req.end();
};
var invokeDHCTests = function(requestName, projectName, definition, response) {
    var results = {};
    var result;
    var scriptName;
    var tests = dhcLib.getTestsForRequest(requestName, projectName);
    tests.forEach(function(testName) {
        var scriptPath = '../projects/' + projectName + '/' + testName;
        var script = require(scriptPath);
        executeTestScript(script, definition, response);
    });
};
var executeTestScript = function(script, req, res) {
    var result = {};
    for (var testName in script) {
        if (script.hasOwnProperty(testName)) {
            notify.info('Executing test ::  ' + testName);
            try {
                script[testName](req, res);
                result[testName] = {};
                result[testName].passed = true;
                notify.success('test: ' + testName + ' passed');
            } catch (e) {
                result[testName] = {};
                result[testName].passed = false;
                result[testName].result = e;
                notify.error('test: ' + testName + ' failed.');
            }
        }
    }
    return result;
};